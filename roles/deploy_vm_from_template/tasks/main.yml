---
# -------------------------------------------------------------------------------------------------------------------
# Select Windows Server Core or Desktop Experience
# -------------------------------------------------------------------------------------------------------------------
- name: Set Template for Windows Server 2022 (Desktop Experience)
  set_fact:
    vm_template: "{{ server_2022_desktop_experience_template }}" # From role defaults
  when: selection_vm_os == "Windows Server 2022 Desktop Experience"
 
- name: Set Template for Windows Server 2022 (Core)
  set_fact:
    vm_template: "{{ server_2022_core_template }}" # From role defaults
  when: selection_vm_os == "Windows Server 2022 Core"
 
- name: Assert that Template is Selected
  assert:
    that:
      - vm_template is defined
    fail_msg: "No VM template defined, 'selection_vm_os' value '{{ selection_vm_os }}' either unsupported or null."

# -------------------------------------------------------------------------------------------------------------------
# Select Hosting Platform
# -------------------------------------------------------------------------------------------------------------------
- name: Set vCenter Server DC1 
  set_fact:
    vcenter_server: "{{ vcenter_server_dc1 }}" # From role defaults
    vcenter_datacenter: "{{ vcenter_datacenter_dc1 }}" # From role defaults
    vcenter_cluster: "{{ vcenter_cluster_dc1 }}" # From role defaults
  when: selection_vm_platform == "VMware DC1 Production"
 
- name: Set Set vCenter Server DC2
  set_fact:
    vcenter_server: "{{ vcenter_server_dc2 }}" # From role defaults
    vcenter_datacenter: "{{ vcenter_datacenter_dc2 }}" # From role defaults
    vcenter_cluster: "{{ vcenter_cluster_dc2 }}" # From role defaults
  when: selection_vm_platform == "VMware DC2 Production"
 
- name: Assert that Template is Selected
  assert:
    that:
      - vm_template is defined
    fail_msg: "No vCenter defined, 'selection_vm_platform' value '{{ selection_vm_platform }}' either unsupported or null."

# -------------------------------------------------------------------------------------------------------------------
# Deploy VM from Template
# -------------------------------------------------------------------------------------------------------------------
 
- name: Deploy VM from Template
  vmware_guest:
    hostname: "{{ vcenter_server }}" # From workflow survey
    cluster: "{{ vcenter_cluster }}" # From workflow survey
    datacenter: "{{ vcenter_datacenter }}" # From workflow survey
    datastore: "{{ vm_datastore }}" # From workflow survey
    folder: "/{{ vcenter_datacenter }}/vm" # From workflow survey
    username: "{{ vcenter_admin_username }}" # From workflow Credencials
    password: "{{ vcenter_admin_password }}" # From workflow survey
    name: "{{ server_hostname | upper }}" # From workflow survey
    template: "/{{ vcenter_datacenter }}/vm/{{ vmware_templates_folder }}/{{ vm_template }}"
    validate_certs: "{{ vmware_validate_certs }}" # From role defaults
    hardware:
      boot_firmware: efi
      hotadd_cpu: False
      hotremove_cpu: False
      hotadd_memory: False
      memory_mb: "{{ vm_memory }}" # From workflow survey
      num_cpus: "{{ vm_cpus }}" # From workflow survey
      num_cpu_cores_per_socket: 1
      scsi: lsilogicsas
    networks:
    - name: "{{ vm_static_portgroup }}" # From workflow survey
      device_type: vmxnet3
      type: static
      ip: "{{ static_ip }}" # From workflow survey
      netmask: "{{ subnet_mask }}" # From workflow survey
      gateway: "{{ default_gateway }}" # From workflow survey
      dns_servers:
      - 10.100.2.10
      - 10.101.2.11
      connected: True
    state: poweredon
    wait_for_ip_address: true
    customization:
      hostname: "{{ server_hostname }}" # From workflow survey
      password: "{{ win_local_admin_password }}" # From workflow survey
      runonce:
      - powershell.exe -ExecutionPolicy Unrestricted -File "{{ winrmConfig_file_name }}" -ForceNewSSLCert -EnableCredSSP
  register: vm_facts_after_build
  until: 'vm_facts_after_build.instance.ipv4 == static_ip'
  retries: 50
  delay: 10
  
- name: Set VM Tags
  vmware_tag_manager:
    hostname: "{{ vcenter_server }}" # From workflow survey
    username: "{{ vcenter_admin_username }}" # From workflow survey
    password: "{{ vcenter_admin_password }}" # From workflow survey
    validate_certs: "{{ vmware_validate_certs }}" # From role defaults
    object_name: "{{ server_hostname | upper }}" # From workflow survey
    object_type: VirtualMachine
    state: add
    tag_names:
      - "environment:{{ environment_tag[server_environment | lower] }}" # From workflow survey
 
- name: Set VM Annotations
  vmware_guest_custom_attributes:
    hostname: "{{ vcenter_server }}" # From workflow survey
    username: "{{ vcenter_admin_username }}" # From workflow survey
    password: "{{ vcenter_admin_password }}" # From workflow survey
    validate_certs: "{{ vmware_validate_certs }}" # From role defaults
    name: "{{ server_hostname }}" # From workflow survey
    state: present
    attributes:
      - name: Server Description
        value: "{{ server_description }}" # From workflow survey
      - name: Business Custodian
        value: "{{ custodian }}" # From workflow survey
      - name: Technical Custodian
        value: "{{ tech_custodian }}" # From workflow survey
      - name: Build Engineer
        value: "{{ ansible_user }}" # From workflow survey
 
- name: Set Post Server Build Facts
  set_stats:
    aggregate: yes
    data:
      #inventory_host_name: "{{ vm_facts_after_build.invocation.module_args.customization.hostname }}"
      #vm_port_group: "{{ vm_facts_after_build.invocation.module_args.networks.name }}"
      vm_static_ip: "{{ vm_facts_after_build.instance.ipv4 }}"
      #vm_subnet_mask: "{{ vm_facts_after_build.invocation.module_args.networks.netmask }}"
      #vm_gateway: "{{ vm_facts_after_build.invocation.module_args.networks.gateway }}"
      vm_macdaddress: "{{ vm_facts_after_build.instance.hw_eth0.macaddress }}"
    per_host: no
